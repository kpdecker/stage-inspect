#!/usr/bin/env ruby
# See LICENSE

require 'rubygems';
require 'optparse';
require 'open3';
require 'json';

# Generates the list of process that are running
def processIds(appId)
  Open3.popen3("novacom -- run file://usr/bin/luna-send -i -n 1 luna://com.palm.applicationManager/running {}") do |stdin, stdout, stderr|
    responseLine = stderr.readline
    response = responseLine.gsub!(/\*\* Message: serviceResponse Handling: 2, /, "");
    if !response
      puts responseLine
      exit
    end

    jsonObj = JSON.parse(response);

    ret = [];
    jsonObj["running"].each do |value|
      if appId == nil or value["id"] == appId
        ret.push value;
      end
    end

    ret.sort! do |a, b|
      idcmp = a["id"] <=> b["id"]
      idcmp == 0 ? a["processid"] <=> b["processid"] : idcmp
    end

    return ret;
  end
end

def loadAppInfo()
  if File::exists?("appinfo.json")
    File.open("appinfo.json", "r") do |f|
      return JSON.load(f);
    end
  end
  return {}
end

def list(appId)
  if appId
    print "Running Processes for ", appId, "\n"
  else
    print "Running Processes\n"
  end

  $runningList.each_index do |index|
    value = $runningList[index];
    if appId
      print "  [", index+1, "] ", value["processid"], "\n";
    else
      print "  [", index+1, "] ", value["id"], " => ", value["processid"], "\n";
    end
  end
end

options = { :appId => loadAppInfo["id"]  }
begin
  OptionParser.new do |opts|
    opts.on("-iMANDATORY", "--appId=MANDATORY", "Application ID") do |v|
      options[:appId] = v
    end
    opts.on("-a", "--all", "All applications") do |v|
      options[:appId] = nil
    end
    opts.on("-l", "--list", "List running processes") do
      options[:list] = true
    end
    opts.on("-h", "--help", "List running processes") do
      raise
    end
  end.parse!
rescue
  puts(<<-eos
Usage: inspect-tool [--appId appId | -i appId | --all] [--list] [stageIndex | stageId]
    stageIndex: Index of stage to inspect. This index is relative to the list output by --list
    stageId: Id of stage to inspect i.e. 1007
    --list: Lists the currently running processes. This option is implied if neither stageIndex
            nor stageId are specified.

    -i appId: Application ID to display associated processes
    --appId appId: Application ID to display associated processes
    --all : Display all running processes
eos
)
  exit
end

$runningList = processIds options[:appId];

if options[:list] or ARGV.length === 0
  list options[:appId]
end

ARGV.each do |value|
  value = Integer(value);
  value = SrunningList[value-1]["processid"] if value <= SrunningList.length

  print "Inspecting process ", value, "\n";
  system("novacom -- run file://usr/bin/luna-send luna://com.palm.applicationManager/inspect '{\"processId\":\"" + value.to_s + "\"}'");
end
