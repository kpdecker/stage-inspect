#!/usr/bin/env ruby
# See LICENSE

require 'rubygems';
require 'optparse';
require 'open3';
require 'json';

# Generates the list of process that are running
def processIds(appId)
  Open3.popen3("novacom -- run file://usr/bin/luna-send -i -n 1 luna://com.palm.applicationManager/running {}") do |stdin, stdout, stderr|
    responseLine = stderr.readline
    response = responseLine.gsub!(/\*\* Message: serviceResponse Handling: 2, /, "");
    if !response
      puts responseLine
      exit
    end

    jsonObj = JSON.parse(response);

    ret = [];
    jsonObj["running"].each do |value|
      if appId == nil or value["id"] == appId
        ret.push value;
      end
    end
    return ret;
  end
end

def loadAppInfo()
  if File::exists?("appinfo.json")
    File.open("appinfo.json", "r") do |f|
      return JSON.load(f);
    end
  end
  return {}
end

def list(appId)
  runningList = processIds appId;

  if appId
    print "Running Processes for ", appId, "\n"
  else
    print "Running Processes\n"
  end

  runningList.each_index do |index|
    value = runningList[index];
    if appId
      print "  [", index+1, "] ", value["processid"], "\n";
    else
      print "  [", index+1, "] ", value["id"], " => ", value["processid"], "\n";
    end
  end
end

options = { :appId => loadAppInfo["id"]  }
OptionParser.new do |opts|
  opts.banner = "Usage: stage-inspect [options]"

  opts.on("-iMANDATORY", "--appId=MANDATORY", "Application ID") do |v|
    options[:appId] = v
  end
  opts.on("-a", "--all", "All applications") do |v|
    options[:appId] = nil
  end
  opts.on("-l", "--list", "List running processes") do
    options[:list] = true
    list options[:appId]
  end
end.parse!

if ARGV.length === 0
  list options[:appId]
else
  runningList = processIds options[:appId];
  ARGV.each do |value|
    value = Integer(value);
    value = runningList[value-1]["processid"] if value <= runningList.length

    print "Inspecting process ", value, "\n";
    system("novacom -- run file://usr/bin/luna-send luna://com.palm.applicationManager/inspect '{\"processId\":\"" + value.to_s + "\"}'");
  end
end
